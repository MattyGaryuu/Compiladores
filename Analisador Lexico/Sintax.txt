<program>::=<program> <identifier> ;
<variable-declaration-part>::= | var <variable-declaration>
<variable-declaration>::=<identifier> <variable-declaration2> : <type> ; | <variable-declaration>
<variable-declaration2>::=, <identifier>  | 
<type>::=<simple-type> | <array-type>
<array-type>::=array [ <index-range> ] of <simple-type>
<index-range>::=<integer-constant> .. <integer-constant> 
<simple-type>::=char | integer | boolean
<type-identifier>::=<identifier>
<statement-part>::=<compound-statement>
<compound statement>::= begin <statement> end
<statement>::=<simple-statement> ; | <structured-statement> ; | <statement> ;
<simple-statement>::=<assignment-statement> | <read-statement> | <write-statement>
<assignment-statement>::=<variable> := <expression>
<read-statement>::=read ( <variable> <function-call> )
<write-statement>::=write ( <variable> <function-call> )
<structured-statement>::=<compound-statement> | <if-statement> | <while-statement>
<if-statement>::= if <expression> then <statement> | if <expression> then <statement> else <statement>
<while-statement>::=while <expression> do <statement>
<expression>::=<simple-expression> | <simple-expression> <relational-operator> <simple-expression> 
<simple-expression>::=<sign> <term> <simple-expression2> 
<simple-expression2>::=<adding operator> <term> | 
<term>::=<factor> { <multiplying operator> <factor> }
<term-2>::=<multiplying operator> <factor> |  
<factor>::=<variable> | <constant> | ( <expression> ) | not <factor>
<relational operator>::== | <> | < | <= | >= | > | or | and
<sign>::=+ | ­ | <empty>
<adding operator>::= + | ­
<multiplying operator>::=* | div
<variable>::=<entire-variable> | <indexed-variable> 
<indexed-variable>::=<array-variable> [ <expression> ]
<array-variable>::=<entire-variable> 
<entire variable>::=<variable-identifier>
<variable-identifier>::=<identifier>
<function-call>::= , <variable> | <function-call> | 